# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags:
      - '*' # Push events to matching v*, i.e. v1.0.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      # Runs a single command using the runners shell
      - name: Install Python 3.7
        run: python3.7 -m pip install ansible

      # Runs a set of commands using the runners shell
      - name: Build the Ansible collection
        run: |
          mkdir -p build
          ansible-galaxy collection build -f --output-path build
      
      - name: Create a Release
        id: create_a_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
      
      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_a_release.outputs.upload_url }}
          # The path to the asset you want to upload
          asset_path: build/netbox-netbox-${{ steps.get_version.outputs.VERSION }}.tar.gz
          # The name of the asset you want to upload
          asset_name: "netbox-netbox-${{ steps.get_version.outputs.VERSION }}.tar.gz"
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: "application/gzip"
